#include <iostream>

#include "matrix4f.h"
#include "vector4f.h"

using namespace matrix4f;
using namespace vector4f;

void Matrix4f::scale(float scalar) {

	m[0][0] *= scalar;
	m[0][1] *= scalar;
	m[0][2] *= scalar;
	m[0][3] *= scalar;
	m[1][0] *= scalar;
	m[1][1] *= scalar;
	m[1][2] *= scalar;
	m[1][3] *= scalar;
	m[2][0] *= scalar;
	m[2][1] *= scalar;
	m[2][2] *= scalar;
	m[2][3] *= scalar;
	m[3][0] *= scalar;
	m[3][1] *= scalar;
	m[3][2] *= scalar;
	m[3][3] *= scalar;
}

void Matrix4f::add(Matrix4f* m1) {

	m[0][0] += m1->m[0][0];
	m[0][1] += m1->m[0][1];
	m[0][2] += m1->m[0][2];
	m[0][3] += m1->m[0][3];

	m[1][0] += m1->m[1][0];
	m[1][1] += m1->m[1][1];
	m[1][2] += m1->m[1][2];
	m[1][3] += m1->m[1][3];

	m[2][0] += m1->m[2][0];
	m[2][1] += m1->m[2][1];
	m[2][2] += m1->m[2][2];
	m[2][3] += m1->m[2][3];

	m[3][0] += m1->m[3][0];
	m[3][1] += m1->m[3][1];
	m[3][2] += m1->m[3][2];
	m[3][3] += m1->m[3][3];
}

void Matrix4f::subtract(Matrix4f* m1) {

	m[0][0] -= m1->m[0][0];
	m[0][1] -= m1->m[0][1];
	m[0][2] -= m1->m[0][2];
	m[0][3] -= m1->m[0][3];

	m[1][0] -= m1->m[1][0];
	m[1][1] -= m1->m[1][1];
	m[1][2] -= m1->m[1][2];
	m[1][3] -= m1->m[1][3];

	m[2][0] -= m1->m[2][0];
	m[2][1] -= m1->m[2][1];
	m[2][2] -= m1->m[2][2];
	m[2][3] -= m1->m[2][3];

	m[3][0] -= m1->m[3][0];
	m[3][1] -= m1->m[3][1];
	m[3][2] -= m1->m[3][2];
	m[3][3] -= m1->m[3][3];
}

Matrix4f::~Matrix4f() {}

Matrix4f::Matrix4f() {
	m[0][0] = 0;
	m[0][1] = 0;
	m[0][2] = 0;
	m[0][3] = 0;

	m[1][0] = 0;
	m[1][1] = 0;
	m[1][2] = 0;
	m[1][3] = 0;

	m[2][0] = 0;
	m[2][1] = 0;
	m[2][2] = 0;
	m[2][3] = 0;

	m[3][0] = 0;
	m[3][1] = 0;
	m[3][2] = 0;
	m[3][3] = 0;
}

Matrix4f::Matrix4f(Vector4f p, Vector4f s, Vector4f r) {
	m[0][0] = 1;
	m[0][1] = 1;
	m[0][2] = 1;
	m[0][3] = p.x;

	m[1][0] = 1;
	m[1][1] = 1;
	m[1][2] = 1;
	m[1][3] = p.y;

	m[2][0] = 1;
	m[2][1] = 1;
	m[2][2] = 1;
	m[2][3] = p.z;

	m[3][0] = 1;
	m[3][1] = 1;
	m[3][2] = 1;
	m[3][3] = 1;
}

void Matrix4f::multiply(Matrix4f* m1) {

	Matrix4f matrix;

	matrix.m[0][0] =
		(m[0][0] * m1->m[0][0]) + (m[0][1] * m1->m[1][0]) + (m[0][2] * m1->m[2][0]) + (m[0][3] * m1->m[3][0]);
	matrix.m[0][1] =
		(m[0][0] * m1->m[0][1]) + (m[0][1] * m1->m[1][1]) + (m[0][2] * m1->m[2][1]) + (m[0][3] * m1->m[3][1]);
	matrix.m[0][2] =
		(m[0][0] * m1->m[0][2]) + (m[0][1] * m1->m[1][2]) + (m[0][2] * m1->m[2][2]) + (m[0][3] * m1->m[3][2]);
	matrix.m[0][3] =
		(m[0][0] * m1->m[0][3]) + (m[0][1] * m1->m[1][3]) + (m[0][2] * m1->m[2][3]) + (m[0][3] * m1->m[3][3]);

	matrix.m[1][0] =
		(m[1][0] * m1->m[0][0]) + (m[1][1] * m1->m[1][0]) + (m[1][2] * m1->m[2][0]) + (m[1][3] * m1->m[3][0]);
	matrix.m[1][1] =
		(m[1][0] * m1->m[0][1]) + (m[1][1] * m1->m[1][1]) + (m[1][2] * m1->m[2][1]) + (m[1][3] * m1->m[3][1]);
	matrix.m[1][2] =
		(m[1][0] * m1->m[0][2]) + (m[1][1] * m1->m[1][2]) + (m[1][2] * m1->m[2][2]) + (m[1][3] * m1->m[3][2]);
	matrix.m[1][3] =
		(m[1][0] * m1->m[0][3]) + (m[1][1] * m1->m[1][3]) + (m[1][2] * m1->m[2][3]) + (m[1][3] * m1->m[3][3]);

	matrix.m[2][0] =
		(m[2][0] * m1->m[0][0]) + (m[2][1] * m1->m[1][0]) + (m[2][2] * m1->m[2][0]) + (m[2][3] * m1->m[3][0]);
	matrix.m[2][1] =
		(m[2][0] * m1->m[0][1]) + (m[2][1] * m1->m[1][1]) + (m[2][2] * m1->m[2][1]) + (m[2][3] * m1->m[3][1]);
	matrix.m[2][2] =
		(m[2][0] * m1->m[0][2]) + (m[2][1] * m1->m[1][2]) + (m[2][2] * m1->m[2][2]) + (m[2][3] * m1->m[3][2]);
	matrix.m[2][3] =
		(m[2][0] * m1->m[0][3]) + (m[2][1] * m1->m[1][3]) + (m[2][2] * m1->m[2][3]) + (m[2][3] * m1->m[3][3]);

	matrix.m[3][0] =
		(m[3][0] * m1->m[0][0]) + (m[3][1] * m1->m[1][0]) + (m[3][2] * m1->m[2][0]) + (m[3][3] * m1->m[3][0]);
	matrix.m[3][1] =
		(m[3][0] * m1->m[0][1]) + (m[3][1] * m1->m[1][1]) + (m[3][2] * m1->m[2][1]) + (m[3][3] * m1->m[3][1]);
	matrix.m[3][2] =
		(m[3][0] * m1->m[0][2]) + (m[3][1] * m1->m[1][2]) + (m[3][2] * m1->m[2][2]) + (m[3][3] * m1->m[3][2]);
	matrix.m[3][3] =
		(m[3][0] * m1->m[0][3]) + (m[3][1] * m1->m[1][3]) + (m[3][2] * m1->m[2][3]) + (m[3][3] * m1->m[3][3]);

	m[0][0] = matrix.m[0][0];
	m[0][1] = matrix.m[0][1];
	m[0][2] = matrix.m[0][2];
	m[0][3] = matrix.m[0][3];

	m[1][0] = matrix.m[1][0];
	m[1][1] = matrix.m[1][1];
	m[1][2] = matrix.m[1][2];
	m[1][3] = matrix.m[1][3];

	m[2][0] = matrix.m[2][0];
	m[2][1] = matrix.m[2][1];
	m[2][2] = matrix.m[2][2];
	m[2][3] = matrix.m[2][3];

	m[3][0] = matrix.m[3][0];
	m[3][1] = matrix.m[3][1];
	m[3][2] = matrix.m[3][2];
	m[3][3] = matrix.m[3][3];
}

void Matrix4f::print() {

	char msg[sizeof(float) * 16];
	sprintf(msg, "(%f %f %f %f\r\n %f %f %f %f\r\n %f %f %f %f\r\n %f %f %f %f)\r\n", m[0][0], m[0][1], m[0][2],
			m[0][3], m[1][0], m[1][1], m[1][2], m[1][3], m[2][0], m[2][1], m[2][2], m[2][3], m[3][0], m[3][1], m[3][2],
			m[3][3]);

	std::cout << msg << std::endl;
}
